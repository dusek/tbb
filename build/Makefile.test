# Copyright 2005-2007 Intel Corporation.  All Rights Reserved.
#
# This file is part of Threading Building Blocks.
#
# Threading Building Blocks is free software; you can redistribute it
# and/or modify it under the terms of the GNU General Public License
# version 2 as published by the Free Software Foundation.
#
# Threading Building Blocks is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty
# of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Threading Building Blocks; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
# As a special exception, you may use this file as part of a free software
# library without restriction.  Specifically, if other files instantiate
# templates or use macros or inline functions from this file, or you compile
# this file and link it with other files to produce an executable, this
# file does not by itself cause the resulting executable to be covered by
# the GNU General Public License.  This exception does not however
# invalidate any other reasons why the executable file might be covered by
# the GNU General Public License.

#------------------------------------------------------------------------------
# Define rules for making the TBB tests.
#------------------------------------------------------------------------------
.PHONY: default test_tbb_plain clean

tbb_root ?= "$(TBB20_INSTALL_DIR)"
BUILDING_PHASE=1
include $(tbb_root)/build/common.inc

CPLUS_FLAGS_NOSTRICT:=$(subst -strict_ansi,-ansi,$(CPLUS_FLAGS))

default: test_tbb_plain # test_tbb_alt test_tbb_cross 

#------------------------------------------------------------
# Define static pattern rules dealing with .cpp source files
#------------------------------------------------------------

VPATH = $(tbb_root)/src/tbb/$(ASSEMBLY_SOURCE) $(tbb_root)/src/tbb $(tbb_root)/src/test

.PRECIOUS: %.$(OBJ) %.$(DLL).$(OBJ)

%.$(OBJ): %.cpp
	$(CPLUS) $(COMPILE_ONLY) $(CPLUS_FLAGS) $(INCLUDES) $<

%.$(OBJ): %.c
	$(CPLUS) $(COMPILE_ONLY) $(C_FLAGS) $(INCLUDES) $<

%.$(OBJ): %.asm
	$(ASM) $(ASM_FLAGS) $<

tbb_misc.$(OBJ): tbb_misc.cpp version_string.tmp
	$(CPLUS) $(COMPILE_ONLY) $(CPLUS_FLAGS_NOSTRICT) $(INCLUDE_KEY). $(INCLUDES) $<

tbb_misc.E: tbb_misc.cpp version_string.tmp
	$(CPLUS) $(PREPROC_ONLY) $(CPLUS_FLAGS_NOSTRICT) $(INCLUDE_KEY). $(INCLUDES) $< >$@

# Rule for generating .E file if needed for visual inspection
%.E: %.cpp
	$(CPLUS) $(PREPROC_ONLY) $(CPLUS_FLAGS) $(INCLUDES) $< >$@

# TODO Rule for generating .asm file if needed for visual inspection
%.asm: %.cpp
	$(CPLUS) /c /Fa $(CPLUS_FLAGS) $(INCLUDES) $<

# TODO Rule for generating .s file if needed for visual inspection
%.s: %.cpp
	$(CPLUS) -S $(CPLUS_FLAGS) $(INCLUDES) $<

# Rule for generating executable test
%.exe: %.$(OBJ) $(TBB.LIB)
	$(CPLUS) $(OUTPUT_KEY)$@ $(CPLUS_FLAGS) $< $(TBB.LIB) $(LIBS) $(LINK_FLAGS)

ifeq (1,$(TBB_NOSTRICT))
# GNU 3.2.3 headers have a ISO syntax that is rejected by Intel compiler in -strict_ansi mode.
# The Mac uses gcc, so the list is empty for that platform.
# The files below need the -strict_ansi flag downgraded to -ansi to compile

KNOWN_NOSTRICT += \
	test_concurrent_hash_map.o	\
	test_concurrent_vector.o		\
	test_handle_perror.o		\
	test_cache_aligned_allocator_STL.o	\
	test_task_scheduler_init.o	\
	test_model_plugin.o	\
	test_parallel_sort.o

$(KNOWN_NOSTRICT): %.o: %.cpp
	$(CPLUS) $(COMPILE_ONLY) $(CPLUS_FLAGS_NOSTRICT) $(INCLUDES) $<
endif

version_string.tmp:
	$(MAKE_VERSIONS)

# Rule for generating test using Windows compiler with different flags
#%-cross.exe: %.cpp
#	cl $(OUTPUT_KEY)$@ $(SECURITY_FLAG) $(CPLUS_CROSS_FLAGS) $(INCLUDES) $< $(TBB.LIB) $(LIBS) $(LINK_FLAGS)

# Rules for generating a test DLL
%.$(DLL).$(OBJ): %.cpp
	$(CPLUS) $(COMPILE_ONLY) $(OUTPUTOBJ_KEY)$@ $(CPLUS_FLAGS_NOSTRICT) $(PIC_KEY) $(DEFINE_KEY)_USRDLL $(INCLUDES) $<
%.$(DLL): %.$(DLL).$(OBJ) $(TBB.LIB)
	$(CPLUS) $(OUTPUT_KEY)$@ $(CPLUS_FLAGS) $< $(TBB.LIB) $(LIBS) $(LINK_FLAGS) $(PIC_KEY) $(DYLIB_KEY)

# Rule for the test that uses TBB in a dynamically loadable library
test_model_plugin.exe: test_model_plugin.$(OBJ) test_model_plugin.$(DLL)
	$(CPLUS) $(OUTPUT_KEY)$@ $(CPLUS_FLAGS) $< $(LIBS) $(LINK_FLAGS) $(LIBDL)

test_assembly.exe: test_assembly.$(OBJ) $(TBB_ASM.OBJ) cache_aligned_allocator.$(OBJ) tbb_misc.$(OBJ) itt_notify.$(OBJ) spin_mutex.$(OBJ) mutex.$(OBJ) 
	$(CPLUS) $(OUTPUT_KEY)$@ $(CPLUS_FLAGS) $^ $(LIBS) $(TBB.LIB)

test_task_leaks.exe: test_task_leaks.$(OBJ) $(TBB_ASM.OBJ) cache_aligned_allocator.$(OBJ) tbb_misc.$(OBJ) itt_notify.$(OBJ) mutex.$(OBJ) 
	$(CPLUS) $(OUTPUT_KEY)$@ $(CPLUS_FLAGS) $^ $(LIBS) $(TBB.LIB)

test_handle_perror.exe: test_handle_perror.$(OBJ) tbb_misc.$(OBJ) $(TBB_ASM.OBJ)
	$(CPLUS) $(OUTPUT_KEY)$@ $(CPLUS_FLAGS) $^ $(LIBS) $(TBB.LIB)

# These are in alphabetical order
TEST_TBB_PLAIN.EXE = test_assembly.exe 	\
	test_aligned_space.exe		\
	test_atomic.exe 		\
	test_blocked_range.exe 		\
	test_blocked_range2d.exe 	\
	test_concurrent_queue.exe	\
	test_concurrent_vector.exe	\
	test_concurrent_hash_map.exe	\
	test_handle_perror.exe		\
	test_halt.exe 			\
	test_model_plugin.exe		\
	test_mutex.exe			\
	test_mutex_native_threads.exe	\
	test_rwm_upgrade_downgrade.exe	\
	test_cache_aligned_allocator_STL.exe	\
	test_cache_aligned_allocator.exe	\
	test_parallel_for.exe 		\
	test_parallel_reduce.exe 	\
	test_parallel_sort.exe 		\
	test_parallel_scan.exe 		\
	test_parallel_while.exe 	\
	test_pipeline.exe 		\
	test_task_scheduler_init.exe	\
	test_task.exe			\
	test_task_leaks.exe		\
	test_tick_count.exe		\
	test_inits_loop.exe      \
	test_yield.exe

ifdef OPENMP_FLAG
	TEST_TBB_PLAIN.EXE += test_tbb_openmp
test_openmp.exe: test_openmp.cpp 
	$(CPLUS) $(OPENMP_FLAG) $(OUTPUT_KEY)$@ $(CPLUS_FLAGS) $(INCLUDES) $^ $(LIBS) $(TBB.LIB)
.PHONY: test_tbb_openmp
test_tbb_openmp: test_openmp.exe
	./test_openmp.exe 1:4

endif


# Run tests that are in TEST_PLAIN.EXE
# The test are ordered so that simpler components are tested first.
# If a component Y uses component X, then tests for Y should come after tests for X.
test_tbb_plain: $(TEST_TBB_PLAIN.EXE)
	./test_assembly.exe 
        # Yes, 4:8 is intended on the next line. 
	./test_yield.exe 4:8
	./test_handle_perror.exe 
	./test_task_scheduler_init.exe 1:4
	./test_task.exe 1:4
	./test_task_leaks.exe
	./test_atomic.exe 
	./test_cache_aligned_allocator.exe
	./test_cache_aligned_allocator_STL.exe
	./test_blocked_range.exe 1:4
	./test_blocked_range2d.exe 1:4
	./test_parallel_for.exe 1:4
	./test_parallel_sort.exe 1:4
	./test_aligned_space.exe 
	./test_parallel_reduce.exe 1:4
	./test_parallel_scan.exe 1:4
	./test_parallel_while.exe 1:4
	./test_inits_loop.exe
	./test_mutex.exe 1
	./test_mutex.exe 2
	./test_mutex.exe 4
	./test_mutex_native_threads.exe 1
	./test_mutex_native_threads.exe 2
	./test_mutex_native_threads.exe 4
	./test_rwm_upgrade_downgrade.exe 4
        # Yes, 4:8 is intended on the next line. 
	./test_halt.exe 4:8	
	./test_pipeline.exe 1:4
	./test_tick_count.exe 1:4
	./test_concurrent_queue.exe 1:4
	./test_concurrent_vector.exe 1:4
	./test_concurrent_hash_map.exe 1:4
	./test_model_plugin.exe 4

debug_%: test_%.exe
	$(debugger) ./$^ $(debug_args)

clean:
	$(RM) *.$(OBJ) *.exe *.$(DLL) *.$(LIBEXT) *.res *.map *.ilk *.pdb *.exp *.manifest *.tmp *.d core core.*[0-9][0-9]

# Include automatically generated dependences
-include *.d
